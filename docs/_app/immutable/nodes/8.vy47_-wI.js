import{t as l,a as g}from"../chunks/DrDwaiBy.js";import"../chunks/BPGHJWI2.js";import{aj as p,p as y,t as P,a as x,c as s,b as o,s as k}from"../chunks/DMgRPyFJ.js";import{H as D}from"../chunks/CYgJF_JY.js";import{s as v}from"../chunks/DdMn_Oyi.js";import{c as S}from"../chunks/B1s9jqMM.js";import{i as I}from"../chunks/BQwoijYz.js";import{p as O}from"../chunks/CpR21b9X.js";const f={title:"Blogginlägg 2",date:"2025-05-07"},{title:W,date:X}=f;var $=l(`<h1>Startsidan</h1> <h2>Beskrivning:</h2> <p>Jag har lärt mig mycket om Tailwind CSS och sveltekomponenter. Sidan är nu mer fungerande än någonsin men det fins fortfarande mycket att göra.</p> <h2>Ändringar:</h2> <p>En massa ändringar har gjorts i appen. Inläggssidan är nu mer responsiv och har en bättre layout men behöver finslipas. Det finns nu ett eget färgtema som gett sidan nytt liv. “Skapa Inlägg”-sidan är på god väg men behöver fortfarande en del arbete. Den kan fortfarande ännu inte spara inläggen och den borde få ett slags pop-up när man skapar ett inlägg. Funktionaliteten för att skriva kommentarer är också på väg men ännu inte påbörjad, kommentarer visas men går inte att skriva.</p> <p>PS.
Skrivit en funktion som genererar ett slumpmässigt, och unikt, ID till varje inlägg när man öppnar sidan för att posta.</p> <p>Nu sparas även inläggen i local storage så att de inte försvinner när man laddar om sidan. De går att se påbörjad startsidan. Några kommande fixar som detta leder till är att det bara borde visas ett visst antal inlägg samtidigt på sidan samt att de senaste inläggen borde visas högst upp, nu är det i kronologisk ordning.</p> <h2>Nuvarande buggar:</h2> <p>Av någon anledning visas inte bilderna i nya inlägg, bara i de gamla. Jag har inte lyckats lista ut varför.</p> <p>Inte direkt en bugg men en ersättare för den röda layoutlinjen behövs. Den är för stark nu och får stilen att kännas tunn.</p> <p>Layouten på post-korten bör fixas. Mindre headerstorlek och footern bör vara på botten av kortet.</p> <hr> <br> Commit: <a href="https://github.com/Poppegon/Chattr/actions/runs" target="_blank">Version 0.0.1</a> <p>Published: 2025-05-07</p>`,1);function N(t){var e=$();p(28),g(t,e)}const C=Object.freeze(Object.defineProperty({__proto__:null,default:N,metadata:f},Symbol.toStringTag,{value:"Module"})),h={title:"Blogginlägg 3",date:"2025-05-15"},{title:Y,date:Z}=h;var E=l(`<h1>Mer funktionalitiet</h1> <h2>Beskrivning:</h2> <p>Jag har lagt till en del saker som gör sidan mer användarvänlig och ger den mer liv. Utséendet har fått en renovering vilket verkligen blev en förbättring.
Nu finns de viktigaste funktionerna på plats så att Chattr är en fungerande prototyp.</p> <h2>Ändringar:</h2> <p>Nu fungerar likes/dislikes, kommentarer och ett sätt att spara användarnamnet även om det inte är bundet till någor konto eller några posts (annat än till namnet).
Likes och dislikes visas som upvotes/downvotes med en summa mellan knapparna. Summan är antalet likes minus antalet dislikes. Dessutom blir rutan runt summan (på “card”-vyn på startsidan) röd om antaler dislikes överstiger antalet likes. Annars är den grön.</p> <p>Kommentaterna är bara ett enkelt object med en sträng som är namn och en sträng som är själva kommentaren. Kommentarerna läggs till i post-objektets “comments”-array. Det är en enkel lösning som fungerar bra nu.
På nav-baren i toppen finns ett input element där man kan skriva sitt namn. Det sparas i local storage och visas i inläggen och kommentarerna man skriver. Det fylls även in i input elementet automatiskt om man laddar om sidan så att det är tydligt vilket namn man använder.
Jag tog bort de röda linjerna som markerade gränsen mellan de olika delarna i layouten. Nu är de egna delar och de röda detaljerna är borders som ger dem en 3D-effect.</p> <h2>Nuvarande buggar:</h2> <p>Layouten i telefonformat är med en väldigt lös definition fungerande.
Ett problem som jag inte ens börjat lösa är hur man ska hindras från att likea samma post flera gånger. En lösning skulle kunna vara en Array i varje post med namnet på varje användare som interagerat med posten. Nackdelen med det är att man bara kan byta användarnamn och kringgå blocken. En annan lösning skulle kunna vara en lokal Array på varje enhet med ID från varje post som enheten interragerat med. Det är svårare att kringgå men jag tror att man bara kan tömma sin local storage eller bara byta webbläsare men det är inte jätteviktigt ännu.</p> <hr> <br> Commit: <a href="https://github.com/Poppegon/Chattr/actions/runs" target="_blank">Version 0.0.2</a> <p>Published: 2025-05-15</p>`,1);function T(t){var e=E();p(22),g(t,e)}const w=Object.freeze(Object.defineProperty({__proto__:null,default:T,metadata:h},Symbol.toStringTag,{value:"Module"})),c={title:"Projektplan",date:"2025-04-02"},{title:tt,date:et}=c;var B=l('<h1>Startsidan</h1> <h2>Beskrivning:</h2> <p>Forumets fördel är att alla i klassen kan ta del av det. Då skulle vi kunna ha en plats att konversera utan en app som tjänar pengar på att sälja våra data. Tyvärr så kanske det skulle bli lite för svårt och jag tror inte heller att Githubs servrar låter mig spara tillräckligt mycket för att alla inlägg ska kunna ligga kvar. Det är inte lätt att hitta någon dokumentation på hur mycket man får spara på servern och det lilla jag hittade om hur man gör sa att man måste ha en API för kommunikationen så att man kan spara inläggen på en plats där alla användare kan komma åt dem.</p> <p>Då beslutar jag mig för att göra en framsida till ett forum för att i trean göra funktionaliteten med kommunikationen. Väl medveten om att jag inte kommer vinna teknikdagens omröstning. Det jag gör nu innefattar:</p> <h2>Ändringar:</h2> <p>Inga ändringar i projektet ännu.</p> <h2>Framtida funktioner:</h2> <ol><li>✅ Likes/Dislikes</li> <li>✅ Ett sätt att skapa inlägg</li> <li>✅ Kommentarer</li> <li>✅ Taggar/kategorier för inläggen</li> <li>✅ NavBar</li> <li>✅ En detaljsida för varje post med [slug]</li></ol> <hr> <br> Commit: <a href="https://github.com/Poppegon/Chattr/actions/runs/14401749212" target="_blank">Version 0.0.0</a> <p>Published: 2025-04-02</p>',1);function M(t){var e=B();p(22),g(t,e)}const A=Object.freeze(Object.defineProperty({__proto__:null,default:M,metadata:c},Symbol.toStringTag,{value:"Module"}));function z(t,e){throw new D(t,e)}new TextEncoder;const J=!0;async function L({params:t}){const a=Object.entries(Object.assign({"../Inlägg 2.svx":C,"../Inlägg 3.svx":w,"../Projektplan.svx":A})).find(([d])=>d.includes(`${t.blog_details}.svx`));if(!a)throw z(404,"Post not found");const n=a[1],{title:r,date:m}=n.metadata;return{content:n.default,title:r,date:m}}const at=Object.freeze(Object.defineProperty({__proto__:null,load:L,prerender:J},Symbol.toStringTag,{value:"Module"}));var V=l('<article id="post" class="dark:bg-surface-900 bg-surface-50 svelte-efxrkd"><h1> </h1> <p> </p> <div class="prose dark:prose-invert svelte-efxrkd"><!></div></article>');function nt(t,e){y(e,!1);let a=O(e,"data",8);I();var n=V(),r=s(n),m=s(r,!0);o(r);var i=k(r,2),d=s(i);o(i);var u=k(i,2),b=s(u);S(b,()=>a().content,(_,j)=>{j(_,{})}),o(u),o(n),P(()=>{v(m,a().title),v(d,`Published: ${a().date??""}`)}),g(t,n),x()}export{nt as component,at as universal};
